import {} from 'dotenv/config';
import TelegramBot from "node-telegram-bot-api";
import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';

const BOT_TOKEN = process.env.BOT_TOKEN;
const BOT_URL = process.env.BOT_URL;
const port = 3000;

const bot = new TelegramBot(BOT_TOKEN);
bot.setWebHook(`${BOT_URL}/bot${BOT_TOKEN}`);

const app = new Koa();

const router = Router();
router.post(`/bot${BOT_TOKEN}`, ctx => {
    const { body } = ctx.request;
    bot.processUpdate(body);
    ctx.status = 200;
});

app.use(bodyParser());
app.use(router.routes());

app.listen(port, () => {
    console.log(`Listening on ${port}`);
});

// bot.on('message', msg => {
//     const { chat: { id }} = msg;
//     bot.sendMessage(id, 'Pong');
// });

// bot.onText(/\/start (.+)/, (msg, [source, match]) => {
//     const { chat: {id}} = msg;
//     bot.sendMessage(id, match);
// });

bot.onText(/\/start/, (msg) => {

    bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö —Ç–æ–Ω–∫–æ—Å—Ç—è—Ö FAQ –¥–ª—è –≤–æ–ª–Ω—Ç–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–∏—Ä–∏—Å—É—é—â—É—é —Ç–µ–±—è –≥—Ä—É–ø–ø—É.", {
    "reply_markup": {
        "keyboard": [["–ó–∞—è–≤–∫–∏", "–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏"],   ["–û–± —É–¥–æ–±—Å—Ç–≤–∞—Ö"]]
        }
    });

});

// bot.on('message', (msg) => {

//     let Hi = "hi";
//     if (msg.text.toString().toLowerCase().indexOf(Hi) === 0) {
//         bot.sendMessage(msg.chat.id,"<b>bold</b> \n <i>italic</i> \n <em>italic with em</em> \n <a href=\"http://www.example.com/\">inline URL</a> \n <code>inline fixed-width code</code> \n <pre>pre-formatted fixed-width code block</pre>" ,{parse_mode : "HTML"});
//     }

// });


bot.on('message', (msg) => {
    const { chat: {id}} = msg;

    let clear = "–Ω–∞–∑–∞–¥"

    let groupe1 = "–∑–∞—è–≤–∫–∏";
    let groupe2 = "–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏";
    let groupe3 = "–æ–± —É–¥–æ–±—Å—Ç–≤–∞—Ö";

    let gr1_task1 = "–∫–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?/–∫–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –≤ –∫—Ä–æ–Ω–æ—Ü–∫–æ–º –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ?"

    // msg for groupe1
    if (msg.text.toString().toLowerCase() == groupe1) {
        bot.sendMessage(id, "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.", {
            "reply_markup": {
                "keyboard": [["–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?/–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –≤ –ö—Ä–æ–Ω–æ—Ü–∫–æ–º –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ?"], ["–ù–∞–∑–∞–¥"]]
                }
            });
    }

    // msg for groupe2
    if (msg.text.toString().toLowerCase() == groupe2) {
        bot.sendMessage(id,"–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∞ 2");
    }

    // msg for groupe3
    if (msg.text.toString().toLowerCase() == groupe3) {
        bot.sendMessage(id,"–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∞ 3");
    }
    




    // groupe1 tasks
    if (msg.text.toString().toLowerCase() == gr1_task1) {
        bot.sendMessage(msg.chat.id,"<b>–¢–µ—Å—Ç</b> \n <i>italic</i> \n <em>italic with em</em> \n <a href=\"http://www.example.com/\">inline URL</a> \n <code>inline fixed-width code</code> \n <pre>pre-formatted fixed-width code block</pre>" ,{parse_mode : "HTML"});
    }

    //clear
    if (msg.text.toString().toLowerCase() == clear) {
        bot.sendMessage(msg.chat.id, "–•–æ—Ä–æ—à–æ! –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π.", {
            "reply_markup": {
                "keyboard": [["–ó–∞—è–≤–∫–∏", "–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏"],   ["–û–± —É–¥–æ–±—Å—Ç–≤–∞—Ö"]]
                }
        });
    }

});

// Groupe1 –ó–∞—è–≤–∫–∏
// bot.on('message', (msg) => {

//     let groupe1 = '–ó–∞—è–≤–∫–∏ ü§£';
//     if (msg.text.toString().toLowerCase().indexOf(groupe1) === 0) {
//         bot.sendMessage(msg.chat.id,"<b>–ó–∞—è–≤–∫–∏</b> \n <i>italic</i> \n <em>italic with em</em> <pre>pre-formatted fixed-width code block</pre>" ,{parse_mode : "HTML"});
//     }

// });

// Groupe2 –û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏
// bot.on('message', (msg) => {
//     let groupe2 = '–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏';
//     if (msg.text.toString().toLowerCase().includes(groupe2)) {
//         bot.sendMessage(msg.chat.id,"<b>–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏</b> \n <i>italic</i> \n <em>italic with em</em> <pre>pre-formatted fixed-width code block</pre>" ,{parse_mode : "HTML"});
//     }

// });

// Groupe3 –û–± —É–¥–æ–±—Å—Ç–≤–∞—Ö
// bot.on('message', (msg) => {
//     let groupe3 = '–û–± —É–¥–æ–±—Å—Ç–≤–∞—Ö';
//     if (msg.text.toString().toLowerCase().includes(groupe3)) {
//         bot.sendMessage(msg.chat.id,"<b>–û–± —É–¥–æ–±—Å—Ç–≤–∞—Ö</b> \n <i>italic</i> \n <code>inline fixed-width code</code> \n <pre>pre-formatted fixed-width code block</pre>" ,{parse_mode : "HTML"});
//     }

// });